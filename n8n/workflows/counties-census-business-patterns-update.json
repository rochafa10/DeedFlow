{
  "name": "Counties Census Business Patterns Update",
  "nodes": [
    {
      "id": "schedule-trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [100, 200],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months"
            }
          ]
        }
      }
    },
    {
      "id": "get-states-list",
      "name": "Get States List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [300, 200],
      "parameters": {
        "method": "GET",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/states",
        "headers": {
          "apikey": "={{ $env.SUPABASE_ANON_KEY }}",
          "Authorization": "Bearer {{ $env.SUPABASE_ANON_KEY }}",
          "Content-Type": "application/json"
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      }
    },
    {
      "id": "process-states",
      "name": "Process States",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 200],
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get state information\nconst stateData = $input.item.json;\nconst stateCode = stateData.code;\nconst stateName = stateData.name;\n\nconsole.log(`Processing state: ${stateName} (${stateCode})`);\n\n// Get FIPS code mapping for states (simplified mapping)\nconst stateFipsCodes = {\n  'AL': '01', 'AK': '02', 'AZ': '04', 'AR': '05', 'CA': '06',\n  'CO': '08', 'CT': '09', 'DE': '10', 'FL': '12', 'GA': '13',\n  'HI': '15', 'ID': '16', 'IL': '17', 'IN': '18', 'IA': '19',\n  'KS': '20', 'KY': '21', 'LA': '22', 'ME': '23', 'MD': '24',\n  'MA': '25', 'MI': '26', 'MN': '27', 'MS': '28', 'MO': '29',\n  'MT': '30', 'NE': '31', 'NV': '32', 'NH': '33', 'NJ': '34',\n  'NM': '35', 'NY': '36', 'NC': '37', 'ND': '38', 'OH': '39',\n  'OK': '40', 'OR': '41', 'PA': '42', 'RI': '44', 'SC': '45',\n  'SD': '46', 'TN': '47', 'TX': '48', 'UT': '49', 'VT': '50',\n  'VA': '51', 'WA': '53', 'WV': '54', 'WI': '55', 'WY': '56'\n};\n\nconst stateFips = stateFipsCodes[stateCode];\nif (!stateFips) {\n  console.log(`FIPS code not found for state: ${stateCode}`);\n  return { skip: true };\n}\n\nreturn {\n  stateId: stateData.id,\n  stateCode,\n  stateName,\n  stateFips,\n  apiKey: '059814072c853cf2c2c996f264d00b456f04979d'\n};"
      }
    },
    {
      "id": "fetch-census-data",
      "name": "Fetch Census CBP Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 200],
      "parameters": {
        "method": "GET",
        "url": "=https://api.census.gov/data/2023/cbp?get=ESTAB,EMP,PAYANN,NAME&for=county:*&in=state:{{ $json.stateFips }}&key={{ $json.apiKey }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      }
    },
    {
      "id": "process-census-data",
      "name": "Process Census Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200],
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Process Census CBP API response\nconst results = [];\n\nfor (const item of $input.all()) {\n  const stateData = item.json;\n  const censusResponse = item.json.body || item.json;\n  \n  if (!Array.isArray(censusResponse) || censusResponse.length < 2) {\n    console.log(`Invalid census response for state ${stateData.stateCode}`);\n    continue;\n  }\n\n  // First row contains headers: [\"ESTAB\",\"EMP\",\"PAYANN\",\"NAME\",\"state\",\"county\"]\n  const headers = censusResponse[0];\n  const dataRows = censusResponse.slice(1);\n  \n  // Process each county\n  for (const row of dataRows) {\n    const countyData = {};\n    headers.forEach((header, index) => {\n      countyData[header] = row[index];\n    });\n    \n    // Skip if no establishment data\n    if (!countyData.ESTAB || countyData.ESTAB === 'null' || countyData.ESTAB === '') {\n      continue;\n    }\n    \n    // Clean county name (remove \" County\" suffix if present)\n    let countyName = (countyData.NAME || '').replace(/ County$/, '').trim();\n    \n    results.push({\n      stateId: stateData.stateId,\n      stateCode: stateData.stateCode,\n      countyName,\n      establishments: parseInt(countyData.ESTAB) || 0,\n      employees: parseInt(countyData.EMP) || 0,\n      payrollAnnual: parseInt(countyData.PAYANN) || 0,\n      stateFips: countyData.state,\n      countyFips: countyData.county,\n      dataYear: 2023,\n      lastUpdated: new Date().toISOString()\n    });\n  }\n}\n\nconsole.log(`Processed ${results.length} counties with business data`);\nreturn results;"
      }
    },
    {
      "id": "update-county-data",
      "name": "Update County Business Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1100, 200],
      "parameters": {
        "method": "PATCH",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/counties?state_id=eq.{{ $json.stateId }}&name=eq.{{ encodeURIComponent($json.countyName) }}",
        "headers": {
          "apikey": "={{ $env.SUPABASE_ANON_KEY }}",
          "Authorization": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}",
          "Content-Type": "application/json",
          "Prefer": "return=representation"
        },
        "body": {
          "business_establishments": "={{ $json.establishments }}",
          "business_employees": "={{ $json.employees }}",
          "business_payroll_annual": "={{ $json.payrollAnnual }}",
          "census_fips_code": "={{ $json.stateFips }}{{ $json.countyFips }}",
          "business_data_year": "={{ $json.dataYear }}",
          "business_data_updated": "={{ $json.lastUpdated }}",
          "updated_at": "={{ new Date().toISOString() }}"
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      }
    },
    {
      "id": "log-results",
      "name": "Log Update Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 200],
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "let totalUpdated = 0;\nlet totalErrors = 0;\n\nfor (const item of $input.all()) {\n  if (item.json.body && Array.isArray(item.json.body) && item.json.body.length > 0) {\n    totalUpdated++;\n  } else {\n    totalErrors++;\n    console.log('Error updating county:', item.json);\n  }\n}\n\nconsole.log(`Counties Census Update Complete:`);\nconsole.log(`✅ Successfully updated: ${totalUpdated} counties`);\nconsole.log(`❌ Errors: ${totalErrors} counties`);\n\nreturn { \n  success: totalUpdated,\n  errors: totalErrors,\n  timestamp: new Date().toISOString()\n};"
      }
    }
  ],
  "connections": {
    "schedule-trigger": {
      "main": [[{ "node": "get-states-list", "type": "main", "index": 0 }]]
    },
    "get-states-list": {
      "main": [[{ "node": "process-states", "type": "main", "index": 0 }]]
    },
    "process-states": {
      "main": [[{ "node": "fetch-census-data", "type": "main", "index": 0 }]]
    },
    "fetch-census-data": {
      "main": [[{ "node": "process-census-data", "type": "main", "index": 0 }]]
    },
    "process-census-data": {
      "main": [[{ "node": "update-county-data", "type": "main", "index": 0 }]]
    },
    "update-county-data": {
      "main": [[{ "node": "log-results", "type": "main", "index": 0 }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}