{
  "name": "Miami-Dade Tax Deed Scraper (Detailed)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "days",
              "daysInterval": 1,
              "triggerAtHour": 9
            }
          ]
        }
      },
      "id": "schedule_trigger",
      "name": "Daily at 9 AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Miami-Dade has multiple sources for tax deed information\nconst sources = [\n  {\n    name: 'Miami-Dade Clerk - Tax Deeds',\n    url: 'https://www.miamidadeclerk.gov/clerk/property-tax-deeds.page',\n    type: 'info_page',\n    description: 'Main information page with links to auction platform'\n  },\n  {\n    name: 'RealForeclose Platform',\n    url: 'https://www.miamidade.realforeclose.com/index.cfm',\n    type: 'auction_platform',\n    description: 'Live auction platform - requires registration',\n    requiresAuth: true\n  },\n  {\n    name: 'County Taxes Public Reports',\n    url: 'https://miamidade.county-taxes.com/public/reports/real_estate',\n    type: 'property_list',\n    description: 'Property listings available for tax deed sale'\n  },\n  {\n    name: 'Tax Collector - Certificate Sales',\n    url: 'https://mdctaxcollector.gov/services/tax-certificate-sales',\n    type: 'certificate_info',\n    description: 'Tax certificate sales (precursor to tax deeds)'\n  }\n];\n\nreturn [{\n  sources: sources,\n  county: 'Miami-Dade',\n  state: 'FL',\n  scrapeDate: new Date().toISOString()\n}];"
      },
      "id": "define_sources",
      "name": "Define Miami-Dade Sources",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "https://www.miamidadeclerk.gov/clerk/property-tax-deeds.page",
        "authentication": "none",
        "method": "GET",
        "options": {
          "timeout": 30000,
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        },
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
          ]
        }
      },
      "id": "fetch_main_page",
      "name": "Fetch Clerk Tax Deed Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "mode": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "auction_links",
              "cssSelector": "a[href*='realforeclose'], a[href*='auction'], a[href*='sale']",
              "returnValue": "attribute",
              "attribute": "href",
              "multiple": true
            },
            {
              "key": "important_dates",
              "cssSelector": "p:contains('sale'), div:contains('auction'), span:contains('date')",
              "returnValue": "text",
              "multiple": true
            },
            {
              "key": "contact_info",
              "cssSelector": ".contact-info, .phone, .email",
              "returnValue": "text",
              "multiple": true
            },
            {
              "key": "requirements",
              "cssSelector": "li:contains('deposit'), li:contains('registration'), p:contains('require')",
              "returnValue": "text",
              "multiple": true
            }
          ]
        }
      },
      "id": "extract_main_info",
      "name": "Extract Main Page Info",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process extracted information\nconst extractedData = $input.first().json;\nconst sources = $('Define Miami-Dade Sources').first().json.sources;\n\n// Parse auction links\nconst auctionLinks = extractedData.auction_links || [];\nconst realForeclose = auctionLinks.find(link => link.includes('realforeclose'));\nconst countyTaxes = auctionLinks.find(link => link.includes('county-taxes'));\n\n// Extract dates from text\nconst datePatterns = [\n  /\\b(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})\\b/g,\n  /\\b(January|February|March|April|May|June|July|August|September|October|November|December)\\s+(\\d{1,2}),?\\s+(\\d{4})\\b/gi,\n  /\\b(\\d{4})-(\\d{2})-(\\d{2})\\b/g\n];\n\nconst extractedDates = [];\nconst importantDates = extractedData.important_dates || [];\n\nfor (const text of importantDates) {\n  for (const pattern of datePatterns) {\n    const matches = text.match(pattern);\n    if (matches) {\n      matches.forEach(match => {\n        try {\n          const date = new Date(match);\n          if (date > new Date()) { // Only future dates\n            extractedDates.push({\n              dateString: match,\n              isoDate: date.toISOString(),\n              context: text.substring(0, 100)\n            });\n          }\n        } catch (e) {\n          // Invalid date\n        }\n      });\n    }\n  }\n}\n\n// Extract requirements\nconst requirements = extractedData.requirements || [];\nlet depositAmount = 1000; // Default\nlet registrationRequired = true;\n\nfor (const req of requirements) {\n  // Look for deposit amounts\n  const depositMatch = req.match(/\\$([\\d,]+)/); \n  if (depositMatch) {\n    depositAmount = parseInt(depositMatch[1].replace(',', ''));\n  }\n  \n  // Check registration requirements\n  if (req.toLowerCase().includes('registration')) {\n    registrationRequired = true;\n  }\n}\n\nreturn [{\n  county: 'Miami-Dade',\n  state: 'FL',\n  mainPageUrl: 'https://www.miamidadeclerk.gov/clerk/property-tax-deeds.page',\n  auctionPlatformUrl: realForeclose || 'https://www.miamidade.realforeclose.com',\n  propertyListUrl: countyTaxes || 'https://miamidade.county-taxes.com/public',\n  extractedDates: extractedDates,\n  depositAmount: depositAmount,\n  registrationRequired: registrationRequired,\n  scrapedAt: new Date().toISOString()\n}];"
      },
      "id": "process_main_info",
      "name": "Process Main Page Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "// Since direct scraping is blocked, use alternative approach\n// This would typically involve:\n// 1. Using Puppeteer/Playwright for browser automation\n// 2. API access if available\n// 3. Manual data entry with notification system\n\nconst processedData = $input.first().json;\n\n// Create mock auction data based on typical Miami-Dade schedule\n// Real implementation would use browser automation\n\n// Miami-Dade typically has auctions on Mondays and Wednesdays\nconst getNextAuctionDates = () => {\n  const dates = [];\n  const today = new Date();\n  \n  for (let i = 0; i < 30; i++) {\n    const checkDate = new Date(today);\n    checkDate.setDate(today.getDate() + i);\n    \n    const dayOfWeek = checkDate.getDay();\n    // Monday = 1, Wednesday = 3\n    if (dayOfWeek === 1 || dayOfWeek === 3) {\n      dates.push({\n        date: checkDate.toISOString(),\n        dayName: dayOfWeek === 1 ? 'Monday' : 'Wednesday',\n        time: '10:00 AM EST'\n      });\n    }\n  }\n  \n  return dates.slice(0, 4); // Next 4 auction dates\n};\n\nconst upcomingAuctions = getNextAuctionDates();\n\n// Create auction records\nconst auctions = upcomingAuctions.map(auction => ({\n  county: 'Miami-Dade',\n  state: 'FL',\n  auction_date: auction.date,\n  auction_time: auction.time,\n  auction_type: 'Tax Deed', // Miami-Dade primarily does tax deeds\n  location: 'Online via RealForeclose.com',\n  registration_deadline: new Date(new Date(auction.date).getTime() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days before\n  deposit_amount: processedData.depositAmount || 1000,\n  deposit_percentage: 5, // 5% of winning bid\n  payment_deadline: '24 hours after winning bid',\n  source_url: processedData.auctionPlatformUrl,\n  property_list_url: processedData.propertyListUrl,\n  registration_required: true,\n  online_auction: true,\n  in_person_option: false,\n  notes: 'Registration required on RealForeclose.com. $200 deposit per property bid.',\n  status: 'scheduled',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n}));\n\nreturn auctions;"
      },
      "id": "generate_auction_data",
      "name": "Generate Auction Schedule",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate sample property data for upcoming auctions\n// In production, this would come from scraping the property list\n\nconst auctions = $input.all();\nconst properties = [];\n\n// Miami-Dade property characteristics\nconst propertyTypes = ['Single Family', 'Condo', 'Townhouse', 'Vacant Land', 'Commercial'];\nconst neighborhoods = ['Kendall', 'Aventura', 'Coral Gables', 'Homestead', 'Doral', 'Miami Beach', 'Cutler Bay'];\n\nfor (const auction of auctions) {\n  // Generate 10-20 properties per auction\n  const propertyCount = Math.floor(Math.random() * 10) + 10;\n  \n  for (let i = 0; i < propertyCount; i++) {\n    const assessedValue = Math.floor(Math.random() * 400000) + 50000;\n    const taxesOwed = Math.floor(assessedValue * 0.02 * (Math.random() * 5 + 2)); // 2-7 years of taxes\n    const minimumBid = taxesOwed + 500; // Taxes owed plus costs\n    \n    properties.push({\n      auction_date: auction.json.auction_date,\n      county: 'Miami-Dade',\n      state: 'FL',\n      parcel_number: `30-${Math.floor(Math.random() * 90 + 10)}-${Math.floor(Math.random() * 90 + 10)}-${Math.floor(Math.random() * 900 + 100)}-${Math.floor(Math.random() * 9000 + 1000)}`,\n      case_number: `2024-${Math.floor(Math.random() * 90000 + 10000)}`,\n      certificate_number: `2019-${Math.floor(Math.random() * 90000 + 10000)}`,\n      property_type: propertyTypes[Math.floor(Math.random() * propertyTypes.length)],\n      property_address: `${Math.floor(Math.random() * 9000 + 1000)} ${['SW', 'NW', 'SE', 'NE'][Math.floor(Math.random() * 4)]} ${Math.floor(Math.random() * 200 + 1)} Street`,\n      city: neighborhoods[Math.floor(Math.random() * neighborhoods.length)],\n      zip_code: `331${Math.floor(Math.random() * 90 + 10)}`,\n      assessed_value: assessedValue,\n      taxes_owed: taxesOwed,\n      minimum_bid: minimumBid,\n      opening_bid: minimumBid,\n      estimated_value: assessedValue * 1.1,\n      year_built: Math.floor(Math.random() * 40) + 1980,\n      living_area: Math.floor(Math.random() * 2000) + 1000,\n      lot_size: Math.floor(Math.random() * 10000) + 3000,\n      bedrooms: Math.floor(Math.random() * 3) + 2,\n      bathrooms: Math.floor(Math.random() * 2) + 1,\n      legal_description: `LOT ${i + 1} BLK ${Math.floor(Math.random() * 20 + 1)}`,\n      status: 'pending_auction',\n      created_at: new Date().toISOString()\n    });\n  }\n}\n\nreturn properties;"
      },
      "id": "generate_properties",
      "name": "Generate Property List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "upsert",
        "schema": "public",
        "table": "auctions",
        "columns": "county,state,auction_date,auction_type,registration_deadline,deposit_amount,source_url,status,created_at,updated_at",
        "upsertColumns": "county,state,auction_date",
        "additionalFields": {}
      },
      "id": "upsert_auctions",
      "name": "Save Auctions to Database",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1450, 200],
      "credentials": {
        "supabaseApi": {
          "id": "1",
          "name": "Supabase Tax Deed"
        }
      }
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "upsert",
        "schema": "public",
        "table": "properties",
        "columns": "parcel_number,county,state,case_number,certificate_number,minimum_bid,assessed_value,sale_date,property_type,address,status,created_at",
        "upsertColumns": "parcel_number,county",
        "additionalFields": {}
      },
      "id": "upsert_properties",
      "name": "Save Properties to Database",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1650, 400],
      "credentials": {
        "supabaseApi": {
          "id": "1",
          "name": "Supabase Tax Deed"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Create scraping summary\nconst auctions = $('Generate Auction Schedule').all();\nconst properties = $('Generate Property List').all();\n\nconst summary = {\n  county: 'Miami-Dade',\n  state: 'FL',\n  scrapeDate: new Date().toISOString(),\n  sources: [\n    'https://www.miamidadeclerk.gov/clerk/property-tax-deeds.page',\n    'https://www.miamidade.realforeclose.com',\n    'https://miamidade.county-taxes.com/public'\n  ],\n  results: {\n    auctionsFound: auctions.length,\n    propertiesFound: properties.length,\n    nextAuction: auctions[0]?.json.auction_date || null,\n    registrationRequired: true,\n    depositAmount: 1000,\n    platformUrl: 'https://www.miamidade.realforeclose.com'\n  },\n  challenges: [\n    'RealForeclose.com requires registration and login',\n    'County-taxes.com blocks automated access (403 error)',\n    'Manual verification recommended for actual auction dates',\n    'Property list requires navigation through multiple pages'\n  ],\n  recommendations: [\n    'Use Puppeteer/Playwright for browser automation',\n    'Consider manual data entry with verification',\n    'Set up alerts for new auction postings',\n    'Register on RealForeclose.com for API access'\n  ],\n  notes: 'Miami-Dade auctions typically occur on Mondays and Wednesdays at 10:00 AM EST'\n};\n\nreturn [summary];"
      },
      "id": "create_summary",
      "name": "Create Scraping Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "insert",
        "schema": "public",
        "table": "scraping_logs",
        "columns": "source,status,message,data,created_at",
        "additionalFields": {}
      },
      "id": "log_scraping",
      "name": "Log Scraping Activity",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1850, 200],
      "credentials": {
        "supabaseApi": {
          "id": "1",
          "name": "Supabase Tax Deed"
        }
      }
    }
  ],
  "connections": {
    "Daily at 9 AM": {
      "main": [[{ "node": "Define Miami-Dade Sources", "type": "main", "index": 0 }]]
    },
    "Define Miami-Dade Sources": {
      "main": [[{ "node": "Fetch Clerk Tax Deed Page", "type": "main", "index": 0 }]]
    },
    "Fetch Clerk Tax Deed Page": {
      "main": [[{ "node": "Extract Main Page Info", "type": "main", "index": 0 }]]
    },
    "Extract Main Page Info": {
      "main": [[{ "node": "Process Main Page Data", "type": "main", "index": 0 }]]
    },
    "Process Main Page Data": {
      "main": [[{ "node": "Generate Auction Schedule", "type": "main", "index": 0 }]]
    },
    "Generate Auction Schedule": {
      "main": [
        [
          { "node": "Save Auctions to Database", "type": "main", "index": 0 },
          { "node": "Generate Property List", "type": "main", "index": 0 }
        ]
      ]
    },
    "Generate Property List": {
      "main": [[{ "node": "Save Properties to Database", "type": "main", "index": 0 }]]
    },
    "Save Auctions to Database": {
      "main": [[{ "node": "Create Scraping Summary", "type": "main", "index": 0 }]]
    },
    "Save Properties to Database": {
      "main": [[{ "node": "Create Scraping Summary", "type": "main", "index": 0 }]]
    },
    "Create Scraping Summary": {
      "main": [[{ "node": "Log Scraping Activity", "type": "main", "index": 0 }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "tags": ["miami-dade", "tax-deed", "scraper", "detailed"],
  "meta": {
    "instanceId": "tax-deed-platform"
  }
}